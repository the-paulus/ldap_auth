<?php
require_once dirname(__FILE__) . '/includes/ldap_auth.fields.inc';

/**
 * Implementation of hook_schema().
 *
 * @return The database schema.
 */
function ldap_auth_schema() {

  $schema = array();

  $schema['ldap_auth'] = array(
    'fields' => array(
      'lid' => array(
        'type' => 'serial',
      ),
      'domain' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'bn' => array(
        'type' => 'text',
        'not null' => TRUE,
      )
    ),
    'primary key' => array('lid'),
    'unique keys' => array('unq_lid' => array('lid')),
  );

  return $schema;
}

/* Implementation of hook_uninstall() */
function ldap_auth_uninstall() {
  // Remove the variables
  variable_del('ldap_auth_address');

  $fields = ldap_auth_fields();

  foreach ($fields['fields'] as $name => $group) {

    field_delete_field($name);
    field_delete_instance($fields['instances'][$name][0], TRUE);

  }

  foreach($fields['fieldgroups'] as $name => $group) {

    field_group_group_export_delete($group);
  }
}

/* Implementation of hook_enable() */
function ldap_auth_enable() {

  $fields = ldap_auth_fields();

  foreach ($fields['fields'] as $name => $group) {

    if (!field_info_field($name)) {

      $group['field_name'] = $name;
      $fields['instances'][$name][0]['field_name'] = $name;

      field_create_field($group);
      field_create_instance($fields['instances'][$name][0]);

    }

  }

  foreach ($fields['fieldgroups'] as $name => $group) {

    if (!field_group_exists($group->group_name, $group->entity_type, $group->bundle, $group->mode)) {

      $group->export_type = 0;
      field_group_group_save($group);

    }

  }

}
