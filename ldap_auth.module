<?php

define('PERM_ADMIN_LDAP', 'administer ldap settings');

define('LDAP_AUTH_ADDRESS', 'ldap_auth_address');
define('LDAP_AUTH_DOMAIN', 'ldap_auth_domain');
define('LDAP_AUTH_BN', 'ldap_auth_bn');

/* Implementation of hook_menu */
function ldap_auth_menu() {
  $items = array(
    'admin/people/ldap' => array(
      'title' => t('LDAP Authentication'),
      'description' => t('Configure LDAP authentication settings'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ldap_admin_settings_form'),
      'access arguments' => array(PERM_ADMIN_LDAP),
      'type' => MENU_LOCAL_TASK,
    ),
  );
  return $items;
}

/* Implementation of hook_permissions() */
function ldap_auth_permissions() {
  return array(
    PERM_ADMIN_LDAP => array(
      'title' => t('Administer Acitve Directory or LDAP'),
      'description' => t('Configure Active Directory or LDAP settings.'),
    ),
  );
}

/* Admin settings call back. */
function ldap_admin_settings_form($form, &$form_state) {

  $form = array();

  if(variable_get(LDAP_AUTH_ADDRESS, '') != '') {

    $ldap = ldap_connect(variable_get(LDAP_AUTH_ADDRESS));

    if(@ldap_bind($ldap)) {

      drupal_set_message(t('Unable to bind to LDAP server: %ldap_errot', array('%ldap_error' => ldap_error($ldap))), 'error');

    }

    ldap_unbind($ldap);

  }

  $form[LDAP_AUTH_ADDRESS] = array(
      '#type' => 'textfield',
      '#title' => t('LDAP Address'),
      '#description' => t('Enter the address or IP of the LDAP server (eg: ldap://ldap.example.com)'),
      '#default_value' => variable_get(LDAP_AUTH_ADDRESS, 'ldaps://'),
    );

  $form[LDAP_AUTH_DOMAIN] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#description' => t('The domain that is to be authenticated. Email addresses ending with this domain will be authenticated against the above LDAP server.'),
    '#default_value' => variable_get(LDAP_AUTH_DOMAIN, 'example.com'),
  );

  $form[LDAP_AUTH_BN] = array(
    '#type' => 'textfield',
    '#title' => t('Base Distinquished Name'),
    '#default_value' => variable_get(LDAP_AUTH_BN, ''),
  );

  return system_settings_form($form);

}

/* Implementation of hook_user */
function ldap_auth_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      if ($edit['uid'] != '1') {
        unset($edit['pass']);
        unset($edit['mail']);
      }
      break;
    case 'update':
      // Since we're authenticating against AD using emails, we are not going
      // to allow users to update their information through the website.
      // Users that are not being authenticated against AD, will still be able
      // to update this.
      $ad_domains = explode("\n", variable_get('active_directory_domains', ''));
      foreach ($ad_domains as $domain) {
        if (strpos($edit['mail'], $domain) !== FALSE) {
          unset($edit['pass']);
          unset($edit['mail']);
          break;
        }
      }
      break;
  }
}

/* Implementation of hook_menu_alter */
function ldap_auth_menu_alter(&$items) {
  // If the user is in the domain, then remove this page.
  unset($items['user/password']);
}

/* Implementation of hook_form_alter */
function ldap_auth_form_alter(&$form, $form_state, $form_id) {
  global $user;
  // We are requiring the user's email as the username because that is how
  // we are checking whether or not to authenticate with Drupal or AD.

  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':

      $form['name']['#title'] = t('E-mail Address');

      array_unshift($form['#validate'], '_ldap_user_login_name_validate');

      if (isset($form['#validate']) && is_array($form['#validate']) && ($key = array_search('user_login_authenticate_validate', $form['#validate']) >= 0)) {

        $form['#validate'][$key] = '_ldap_auth_authentication_validate';

      }

      break;
  }
}

/* Validation callback function for checking to see if a user entered an email */
function _ldap_user_login_name_validate($form, &$form_state) {

  $isvalid = valid_email_address($form_state['values']['name']);

  // Check to make sure the username is a valid email address
  if (!$isvalid) {

    form_set_error('name', t('Please enter a valid email address.'));

  }

}

/* Our own authentication callback using AD */
function _ldap_auth_authentication_validate($form, &$form_state) {

  global $user;

  $ad_authentication = FALSE;

  // Check user 1 (administrator) against the database and check non-configured
  // email addresses against the database.
  $account = db_select('users', 'u')
    ->fields('u', array('name', 'uid', 'pass'))
    ->condition('u.mail', $form_state['values']['name'], '=')
    ->execute()
    ->fetchAll();

  if (count($account) == 1) {

    $ad_domains = explode("\n", variable_get('ldap_auth_domains', ''));

    foreach ($ad_domains as $domain) {

      $pos = stripos($form_state['values']['name'], $domain);

      if ($pos > 0 && $account[0]->uid != 1) {

        $ad_authentication = TRUE;
        break;

      }

    }

  }
  else {

    //return;

  }


  // We will authenticate the user against Drupal's DB instead of AD providing
  // they are either the admin (user 1) or a registered user.
  if (!$ad_authentication && count($account) == 1) {

    form_set_value($form['name'], $account[0]->name, $form_state);
    return;

  }
  else {

    $ldap_account = ldap_create_user_info($form, $form_state, $account);

    form_set_value($form['name'], $form_state['values']['name'], $form_state);
    form_set_value($form['pass'], $form_state['values']['pass'], $form_state);

    if ($ldap_account) {
      $user = $ldap_account;
      user_login_finalize();
      //form_clear_error();
      drupal_goto('user');
    }

    return $user;
  }

}

/**
 * Searches LDAP for user information, generates a new user object to either save a new user
 * on the website or edit their information and roles.
 *
 * @param array $form Login form as an array.
 * @param array $form_state Login form state as an array.
 * @param object $account An existing user account, if one exists.
 * @return bool|object User object based on the information from LDAP/AD or FALSE on failure.
 */
function ldap_create_user_info($form, $form_state, $account = NULL) {

  if (!$ldap = ldap_connect(variable_get(LDAP_AUTH_ADDRESS, ''))) {

    watchdog('ldap_auth', 'Unable to connect to LDAP server.');

    return FALSE;

  }

  $form_state['values']['name'] = sanitizeLDAPEmail($form_state['values']['name']);
  $base_dn = variable_get(LDAP_AUTH_BN, '');
  $filter = '(&(objectClass=person)(mail=' . $form_state['values']['name'] . '))';
  $attributes = array('uid');
  $roles = array();    // List of parsed LDAP/AD groups.
  $role = array();    // Array of strings that results in exploding a single string by '-'

  ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);
  ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);

  if (@ldap_bind($ldap)) {

    $ldap_sr = ldap_search($ldap, $base_dn, $filter, $attributes);

    if (ldap_count_entries($ldap, $ldap_sr) == 1) {

      $ldap_entry = ldap_first_entry($ldap, $ldap_sr);

      $ldap_attribute = ldap_first_attribute($ldap, $ldap_entry);
      $ldap_username = strtolower(ldap_get_values($ldap, $ldap_entry, $ldap_attribute)[0]);

    }
    else {

      return FALSE;

    }

  }

  $ldn = "cn=" . $ldap_username . "," . variable_get(LDAP_AUTH_BN);
  if (ldap_bind($ldap, $ldn, $form_state['values']['pass'])) {

    $ldap_fields = array(
      'company',
      'department',
      'givenname',
      'mail',
      'manager',
      'memberOf',
      'samaccountname',
      'sn',
      'title',
    );

    $search_results = ldap_search($ldap, $base_dn, $filter, $ldap_fields);

    if (is_resource($search_results) && ldap_count_entries($ldap, $search_results) == 1) {

      $ldap_entry = ldap_first_entry($ldap, $search_results);
      $ldap_attribute = ldap_first_attribute($ldap, $ldap_entry);
      $ldap_groups = array();
      $ldap_fields = array();

      // Iterate through the attribtues of the returned entry.
      do {

        if (strcasecmp($ldap_attribute, 'memberof') === 0) {

          $ldap_groups = ldap_get_values($ldap, $ldap_entry, $ldap_attribute);

        }
        else {

          $ldap_fields[strtolower($ldap_attribute)] = ldap_get_values($ldap, $ldap_entry, $ldap_attribute)[0];

        }

      } while ($ldap_attribute = ldap_next_attribute($ldap, $ldap_entry));

      // Remove the prefixed subdomain from the roles.
      $configuration_path = conf_path();
      $site_directory = explode('/', $configuration_path)[1];
      $subdomain = explode('.', $site_directory)[0];
      $subdomain = ($subdomain == 'default') ? 'www' : $subdomain;

      foreach ($ldap_groups as $group) {

        if (preg_match('/' . $subdomain . '[\-a-zA-Z ]*/', $group, $role)) {

          $tmp = explode('-', $role[0]);

          array_shift($tmp);

          if (count($tmp) > 1) {

            $roles[] = implode(' ', $tmp);

          }
          else {

            $roles[] = $tmp[0];

          }

        }

      }

    }
    else {

      ldap_free_result($search_results);
      ldap_unbind($ldap);

      return FALSE; // No entries found.

    }

    // Check for new roles and create them.
    $existing_roles = user_roles();

    foreach ($roles as $r) {

      if (in_array($r, $existing_roles)) {

        $rid = array_search($r, $existing_roles);
        $user_roles[$rid] = $r;

      }
      else {

        $new_role = new stdClass;
        $new_role->name = $r;

        user_role_save($new_role);

        $new_role = user_role_load_by_name($r);
        $user_roles[$new_role->rid] = $new_role->name;

      }

    }

    $edit = array(
      'name' => $ldap_username,
      'pass' => $form_state['values']['pass'],
      'init' => $ldap_username,
      'mail' => $ldap_username,
      'status' => 1,
      'roles' => $user_roles,
      'field_first_name' => array('und' => array(array('value' => $ldap_fields['givenname']))),
      'field_last_name' => array('und' => array(array('value' => $ldap_fields['sn']))),
      'field_job_title' => array('und' => array(array('value' => $ldap_fields['title']))),
      'field_company' => array('und' => array(array('value' => (!empty($ldap_fields['company'])) ? $ldap_fields['company'] : ''))),
      'field_department' => array('und' => array(array('value' => $ldap_fields['department']))),
      'field_street_address' => array('und' => array(array('value' => ''))),
      'field_city' => array('und' => array(array('value' => ''))),
      'field_state' => array('und' => array(array('value' => ''))),
      'field_zip' => array('und' => array(array('value' => ''))),
      'field_phone_number' => array('und' => array(array('value' => ''))),
      'field_mobile_phone' => array('und' => array(array('value' => '')))
    );

    // User is already registered on the site. We need to make sure that the information on the site
    // matches what is in LDAP/AD.
    if (count($account) == 1) {

      $user = user_save(user_load($account[0]->uid), $edit);

    }
    else {

      $user = user_save((object) $edit);

    }

  }
  else {

    ldap_unbind($ldap);

    return FALSE;

  }

  ldap_free_result($search_results);
  ldap_unbind($ldap);

  return $user;
}

/**
 * Sanitizes the username form element.
 *
 * @param string $email Email address.
 * @return string Sanitized email address or nothing on failure.
 */
function sanitizeLDAPEmail($email) {

  if (preg_match_all('/[a-z@.]*/i', $email, $matches)) {

    return implode('', $matches[0]);

  }

  return '';

}
